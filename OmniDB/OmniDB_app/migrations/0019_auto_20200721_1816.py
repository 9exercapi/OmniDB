# Generated by Django 3.0.8 on 2020-07-21 18:16

from django.db import migrations

def populate_units(apps, schema_editor):
    Technology = apps.get_model('OmniDB_app', 'Technology')
    MonUnits = apps.get_model('OmniDB_app', 'MonUnits')
    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
max_connections = connection.ExecuteScalar('SHOW max_connections')

result = {
    "type": "pie",
    "data": None,
    "options": {
        "responsive": True,
        "title":{
            "display":True,
            "text":"Backends (max_connections: " + str(max_connections) + ")"
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

databases = connection.Query('''
    SELECT d.datname,
           s.numbackends
    FROM pg_stat_database s
    INNER JOIN pg_database d
    ON d.oid = s.datid
    WHERE NOT d.datistemplate
''')

data = []
color = []
label = []

counter = 1
for db in databases.Rows:
    data.append(db["numbackends"])
    color.append('hsl(' + str(counter * 137.508) + ',50%,50%)')
    counter = counter + 1
    label.append(db["datname"])

result = {
    "labels": label,
    "datasets": [
        {
            "data": data,
            "backgroundColor": color,
            "label": "Dataset 1"
        }
    ]
}
""",
        type='chart',
        title='Backends',
        is_default=True,
        interval=10
    )
    mon_unit.save()

    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
max_connections = connection.ExecuteScalar('SHOW max_connections')

result = {
    "type": "line",
    "data": None,
    "options": {
        "responsive": True,
        "title":{
            "display":True,
            "text":"Backends (max_connections: " + str(max_connections) + ")"
        },
        "tooltips": {
            "mode": "index",
            "intersect": False
        },
        "hover": {
            "mode": "nearest",
            "intersect": True
        },
        "scales": {
            "xAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": True,
                    "labelString": "Time"
                }
            }],
            "yAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": True,
                    "labelString": "Value"
                },
                "ticks": {
                    "beginAtZero": True,
                    "max": int(max_connections)
                }
            }]
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

databases = connection.Query('''
    SELECT d.datname,
           s.numbackends
    FROM pg_stat_database s
    INNER JOIN pg_database d
    ON d.oid = s.datid
    WHERE NOT d.datistemplate
''')

datasets = []
counter = 1
for db in databases.Rows:
    color = 'hsl(' + str(counter * 137.508) + ',50%,50%)'
    counter = counter + 1
    datasets.append({
            "label": db['datname'],
            "fill": False,
            "backgroundColor": color,
            "borderColor": color,
            "lineTension": 0,
            "pointRadius": 1,
            "borderWidth": 1,
            "data": [db["numbackends"]]
        })

result = {
    "labels": [datetime.now().strftime('%H:%M:%S')],
    "datasets": datasets
}
""",
        type='chart_append',
        title='Backends',
        is_default=True,
        interval=10
    )
    mon_unit.save()

    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
result = {
    "type": "line",
    "data": None,
    "options": {
        "legend": {
            "display": False
        },
        "responsive": True,
        "title":{
            "display":False
        },
        "tooltips": {
            "mode": "index",
            "intersect": False
        },
        "hover": {
            "mode": "nearest",
            "intersect": True
        },
        "scales": {
            "xAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": False,
                    "labelString": "Time"
                }
            }],
            "yAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": False
                },
                "ticks": {
                    "beginAtZero": True
                }
            }]
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

if previous_data != None:
    query = "select round((sum(xact_commit+xact_rollback) - " + previous_data["current_count"] + ")/(extract(epoch from now()::time - '" + previous_data["current_time"] + "'::time))::numeric,2) as tps, sum(xact_commit+xact_rollback) as current_count, now()::time as current_time FROM pg_stat_database"
else:
    query = 'select 0 as tps, sum(xact_commit+xact_rollback) as current_count, now()::time as current_time FROM pg_stat_database'

query_data = connection.Query(query)

datasets = []
color = 'hsl(' + str(137.508) + ',50%,50%)'
datasets.append({
        "label": 'Rate',
        "fill": False,
        "backgroundColor": color,
        "borderColor": color,
        "lineTension": 0,
        "pointRadius": 0,
        "borderWidth": 1,
        "data": [query_data.Rows[0]['tps']]
    })

result = {
    "labels": [datetime.now().strftime('%H:%M:%S')],
    "datasets": datasets,
    "current_count": query_data.Rows[0]['current_count'],
    'current_time': query_data.Rows[0]['current_time']
}
""",
        type='chart_append',
        title='Transaction Rate',
        is_default=True,
        interval=30
    )
    mon_unit.save()


class Migration(migrations.Migration):

    dependencies = [
        ('OmniDB_app', '0018_auto_20200721_1802'),
    ]

    operations = [
        migrations.RunPython(populate_units)
    ]
