# Generated by Django 3.0.8 on 2020-09-10 00:25

from django.conf import settings
from django.db import migrations, models
from django.contrib.auth.models import User
import django.db.models.deletion
from django.utils import timezone

def populate_technologies(apps, schema_editor):
    Technology = apps.get_model('OmniDB_app', 'Technology')
    Technology(name='postgresql').save()
    Technology(name='mysql').save()
    Technology(name='mariadb').save()
    Technology(name='oracle').save()
    Technology(name='terminal').save()

def populate_admin_user(apps,schema_editor):
    User.objects.create_user(username='admin',
                             password='admin',
                             email='',
                             last_login=timezone.now(),
                             is_superuser=True,
                             first_name='',
                             last_name='',
                             is_staff=False,
                             is_active=True,
                             date_joined=timezone.now())

def populate_shortcuts(apps, schema_editor):
    Shortcut = apps.get_model('OmniDB_app', 'Shortcut')
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_run_query',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='Q'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_analyze',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='S'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_explain',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='A'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_indent',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='D'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_cancel_query',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='C'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_autocomplete',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='SPACE'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_left_inner_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='O'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_right_inner_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='P'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_new_inner_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='I'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_remove_inner_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='U'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_left_outer_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='K'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_right_outer_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='L'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_new_outer_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='J'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_remove_outer_tab',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='H'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_next_console_command',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='M'
    )
    shortcut_object.save()
    shortcut_object = Shortcut(
        user=None,
        code='shortcut_previous_console_command',
        ctrl_pressed=False,
        shift_pressed=False,
        alt_pressed=False,
        meta_pressed=True,
        key='N'
    )
    shortcut_object.save()

def populate_units(apps, schema_editor):
    Technology = apps.get_model('OmniDB_app', 'Technology')
    MonUnits = apps.get_model('OmniDB_app', 'MonUnits')
    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
max_connections = connection.ExecuteScalar('SHOW max_connections')

result = {
    "type": "pie",
    "data": None,
    "options": {
        "responsive": True,
        "title":{
            "display":True,
            "text":"Backends (max_connections: " + str(max_connections) + ")"
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

databases = connection.Query('''
    SELECT d.datname,
           s.numbackends
    FROM pg_stat_database s
    INNER JOIN pg_database d
    ON d.oid = s.datid
    WHERE NOT d.datistemplate
''')

data = []
color = []
label = []

counter = 1
for db in databases.Rows:
    data.append(db["numbackends"])
    color.append('hsl(' + str(counter * 137.508) + ',50%,50%)')
    counter = counter + 1
    label.append(db["datname"])

result = {
    "labels": label,
    "datasets": [
        {
            "data": data,
            "backgroundColor": color,
            "label": "Dataset 1"
        }
    ]
}
""",
        type='chart',
        title='Backends',
        is_default=True,
        interval=10
    )
    mon_unit.save()

    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
max_connections = connection.ExecuteScalar('SHOW max_connections')

result = {
    "type": "line",
    "data": None,
    "options": {
        "responsive": True,
        "title":{
            "display":True,
            "text":"Backends (max_connections: " + str(max_connections) + ")"
        },
        "tooltips": {
            "mode": "index",
            "intersect": False
        },
        "hover": {
            "mode": "nearest",
            "intersect": True
        },
        "scales": {
            "xAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": True,
                    "labelString": "Time"
                }
            }],
            "yAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": True,
                    "labelString": "Value"
                },
                "ticks": {
                    "beginAtZero": True,
                    "max": int(max_connections)
                }
            }]
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

databases = connection.Query('''
    SELECT d.datname,
           s.numbackends
    FROM pg_stat_database s
    INNER JOIN pg_database d
    ON d.oid = s.datid
    WHERE NOT d.datistemplate
''')

datasets = []
counter = 1
for db in databases.Rows:
    color = 'hsl(' + str(counter * 137.508) + ',50%,50%)'
    counter = counter + 1
    datasets.append({
            "label": db['datname'],
            "fill": False,
            "backgroundColor": color,
            "borderColor": color,
            "lineTension": 0,
            "pointRadius": 1,
            "borderWidth": 1,
            "data": [db["numbackends"]]
        })

result = {
    "labels": [datetime.now().strftime('%H:%M:%S')],
    "datasets": datasets
}
""",
        type='chart_append',
        title='Backends',
        is_default=True,
        interval=10
    )
    mon_unit.save()

    mon_unit = MonUnits(
        user=None,
        technology=Technology.objects.get(name='postgresql'),
        script_chart="""
result = {
    "type": "line",
    "data": None,
    "options": {
        "legend": {
            "display": False
        },
        "responsive": True,
        "title":{
            "display":False
        },
        "tooltips": {
            "mode": "index",
            "intersect": False
        },
        "hover": {
            "mode": "nearest",
            "intersect": True
        },
        "scales": {
            "xAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": False,
                    "labelString": "Time"
                }
            }],
            "yAxes": [{
                "display": True,
                "scaleLabel": {
                    "display": False
                },
                "ticks": {
                    "beginAtZero": True
                }
            }]
        }
    }
}
""",
        script_data="""
from datetime import datetime
from random import randint

if previous_data != None:
    query = "select round((sum(xact_commit+xact_rollback) - " + previous_data["current_count"] + ")/(extract(epoch from now()::time - '" + previous_data["current_time"] + "'::time))::numeric,2) as tps, sum(xact_commit+xact_rollback) as current_count, now()::time as current_time FROM pg_stat_database"
else:
    query = 'select 0 as tps, sum(xact_commit+xact_rollback) as current_count, now()::time as current_time FROM pg_stat_database'

query_data = connection.Query(query)

datasets = []
color = 'hsl(' + str(137.508) + ',50%,50%)'
datasets.append({
        "label": 'Rate',
        "fill": False,
        "backgroundColor": color,
        "borderColor": color,
        "lineTension": 0,
        "pointRadius": 0,
        "borderWidth": 1,
        "data": [query_data.Rows[0]['tps']]
    })

result = {
    "labels": [datetime.now().strftime('%H:%M:%S')],
    "datasets": datasets,
    "current_count": query_data.Rows[0]['current_count'],
    'current_time': query_data.Rows[0]['current_time']
}
""",
        type='chart_append',
        title='Transaction Rate',
        is_default=True,
        interval=30
    )
    mon_unit.save()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='UserDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(default='light', max_length=50)),
                ('font_size', models.IntegerField(default=12)),
                ('csv_encoding', models.CharField(default='utf-8', max_length=50)),
                ('csv_delimiter', models.CharField(default=';', max_length=10)),
                ('welcome_closed', models.BooleanField(default=False)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Technology',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Connection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('user', models.CharField(default='', max_length=200)),
                ('alias', models.CharField(default='', max_length=200)),
                ('conn_string', models.TextField(default='')),
                ('database', models.CharField(default='', max_length=200)),
                ('password', models.CharField(default='', max_length=200)),
                ('port', models.CharField(default='', max_length=50)),
                ('server', models.CharField(default='', max_length=200)),
                ('ssh_key', models.TextField(default='')),
                ('ssh_password', models.CharField(default='', max_length=200)),
                ('ssh_port', models.CharField(default='', max_length=50)),
                ('ssh_server', models.CharField(default='', max_length=200)),
                ('ssh_user', models.CharField(default='', max_length=200)),
                ('use_tunnel', models.BooleanField(default=False)),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Technology')),
            ],
        ),
        migrations.RunPython(
            code=populate_technologies,
        ),
        migrations.AddField(
            model_name='connection',
            name='username',
            field=models.CharField(default='', max_length=200),
        ),
        migrations.AlterField(
            model_name='connection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=50)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupConnection',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Connection')),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Group')),
            ],
        ),
        migrations.AddConstraint(
            model_name='groupconnection',
            constraint=models.UniqueConstraint(fields=('group', 'connection'), name='unique_group_connection'),
        ),
        migrations.CreateModel(
            name='Tab',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(default='', max_length=200)),
                ('snippet', models.TextField(default='')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Connection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='QueryHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_time', models.DateTimeField()),
                ('end_time', models.DateTimeField()),
                ('duration', models.TextField(default='')),
                ('status', models.TextField(default='')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Connection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('snippet', models.TextField(default='')),
            ],
        ),
        migrations.CreateModel(
            name='ConsoleHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('snippet', models.TextField(default='')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Connection')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SnippetFolder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=200)),
                ('create_date', models.DateTimeField()),
                ('modify_date', models.DateTimeField()),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.SnippetFolder')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SnippetFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=200)),
                ('create_date', models.DateTimeField()),
                ('modify_date', models.DateTimeField()),
                ('text', models.TextField(default='')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.SnippetFolder')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Shortcut',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=200)),
                ('ctrl_pressed', models.BooleanField(default=False)),
                ('shift_pressed', models.BooleanField(default=False)),
                ('alt_pressed', models.BooleanField(default=False)),
                ('meta_pressed', models.BooleanField(default=False)),
                ('key', models.CharField(max_length=200)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(
            code=populate_shortcuts,
        ),
        migrations.RunPython(
            code=populate_admin_user,
        ),
        migrations.AlterField(
            model_name='shortcut',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='MonUnits',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('script_chart', models.TextField(default='')),
                ('script_data', models.TextField(default='')),
                ('type', models.TextField(default='')),
                ('title', models.TextField(default='')),
                ('is_default', models.BooleanField(default=False)),
                ('interval', models.IntegerField(default=60)),
                ('technology', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Technology')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='MonUnitsConnections',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interval', models.IntegerField(default=60)),
                ('plugin_name', models.TextField(default='')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='OmniDB_app.Connection')),
                ('unit', models.IntegerField(default=60)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(
            code=populate_units,
        ),
    ]
