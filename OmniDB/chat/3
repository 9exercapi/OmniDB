#! /usr/bin/env python3
import sys
import traceback
import Spartacus.Database
import Spartacus.Utils

class CustomException(Exception):
    """Class used to fire custom exceptions.
    """

    pass

#Main Execution
if len(sys.argv) != 4:
    print('Usage: unifraxConverter.py <input_file> <year> <output_file>')
    sys.exit(0)

try:
    v_inputFileName = sys.argv[1]
    v_year = int(sys.argv[2])
    v_outputFileName = sys.argv[3]
except Exception as exc:
    print(traceback.format_exc())
    sys.exit(0)

try:
    v_productsTable = Spartacus.Database.DataTable()

    v_productsTable.AddColumn('ID')
    v_productsTable.AddColumn('CODPRODUTO')
    v_productsTable.AddColumn('CODALTERNATIVO')
    v_productsTable.AddColumn('DESCRICAO')
    v_productsTable.AddColumn('UNPADRAO')
    v_productsTable.AddColumn('UNIDADE2')
    v_productsTable.AddColumn('FATORUNIDADE2')
    v_productsTable.AddColumn('UNIDADE3')
    v_productsTable.AddColumn('FATORUNIDADE3')
    v_productsTable.AddColumn('NCM')
    v_productsTable.AddColumn('ALIQUOTAPRL')

    v_inputsTable = Spartacus.Database.DataTable()

    v_inputsTable.AddColumn('ID')
    v_inputsTable.AddColumn('CODAGENTE')
    v_inputsTable.AddColumn('NOTAFISCAL')
    v_inputsTable.AddColumn('DATA')
    v_inputsTable.AddColumn('SERIE')
    v_inputsTable.AddColumn('CFOP')
    v_inputsTable.AddColumn('CODPRODUTO')
    v_inputsTable.AddColumn('DI')
    v_inputsTable.AddColumn('QUANTIDADE')
    v_inputsTable.AddColumn('UNIDADE')
    v_inputsTable.AddColumn('CUSTOFOB')
    v_inputsTable.AddColumn('II')
    v_inputsTable.AddColumn('FRETE')
    v_inputsTable.AddColumn('SEGURO')
    v_inputsTable.AddColumn('DESPADUANEIRAS')
    v_inputsTable.AddColumn('DESPACESSORIAS')
    v_inputsTable.AddColumn('IPI')
    v_inputsTable.AddColumn('ICMS')
    v_inputsTable.AddColumn('PIS')
    v_inputsTable.AddColumn('COFINS')
    v_inputsTable.AddColumn('DATADI')
    v_inputsTable.AddColumn('FTCONV')
    v_inputsTable.AddColumn('UNCONV')
    v_inputsTable.AddColumn('FILIAL')
    v_inputsTable.AddColumn('ICMSST')

    v_database = Spartacus.Database.PostgreSQL(
        '192.168.0.103',
        '5432',
        'planner',
        'planner',
        'plaserv'
    )

    v_database.Open()

    v_table = v_database.Query('''
        select pc.*
        from planning.produtos_completo pc
        where pc.emid = 52
          and pc.ano = {0}
        '''.format(
            v_year
        )
    )

    v_productCodeList = []

    for v_row in v_table.Rows:
        v_productCodeList.append(str(v_row['prid']))

        v_productsTable.AddRow([
            len(v_productsTable.Rows) + 1,
            v_row['prid'],
            v_row['pralternativo'],
            v_row['prdescricao'],
            v_row['prun'],
            v_row['prun2'],
            v_row['prfator2'],
            v_row['prun3'],
            v_row['prfator3'],
            v_row['prncm'],
            v_row['aliquota_prl']
        ])

    v_fields = [
        'codbr1',
        'pi',
        'codunifrax',
        'codbr2',
        'descricao_entrada',
        'descricao',
        'ncm',
        'n_di',
        'dt_di',
        'dt_desemb',
        'dt_ent_di',
        'nfe',
        'fabricante',
        'exportador',
        'code',
        'pais_origem',
        'pais_procedencia',
        'qtde_invoice',
        'unid',
        'moeda',
        'fob_invoice_original',
        'fob_usd',
        'seg_inland',
        'fob_tot_usd',
        'fob_tt_rs',
        'fob_unit',
        'fob_unit_usd',
        'frete_uss',
        'frete_rs',
        'seguro_uss',
        'seguro_rs',
        'frete_seguro_rs',
        'ii_rs',
        'ipi_rs',
        'aduaneiras',
        'cif_rs',
        'varia',
        'invoice',
        'tx_us_di',
        'descricao_entrada2',
        'qtde_entrada',
        'unidade_medida_entrada',
        'ano',
        'cfop_nf',
        'conversao'
    ]

    v_inputFile = Spartacus.Utils.DataFileReader(
        v_inputFileName,
        v_fields
    )

    v_inputFile.Open()

    v_nfeOutDbInFile = []
    v_nfeInDbOutFile = []
    v_inClause = ''

    i = 1

    for v_table in v_inputFile.Read(64):
        for v_row in v_table.Rows:
            i += 1

            if not str(v_row['codbr2']) in v_productCodeList:
                v_productCodeList.append(str(v_row['codbr2']))

                v_productsTable.AddRow([
                    len(v_productsTable.Rows) + 1,
                    v_row['codbr2'],
                    v_row['codunifrax'],
                    v_row['descricao_entrada'],
                    v_row['unidade_medida_entrada'],
                    '',
                    '',
                    '',
                    '',
                    v_row['ncm'],
                    ''
                ])

            v_inClause += '{0}, '.format(v_row['nfe'])

            if v_row['nfe'] is None:
                print('Problema na linha: {0}'.format(i))
                print(v_row)
                sys.exit(0)

            v_nfeTable = v_database.Query('''
                select distinct ec.ennf,
                                ec.cfid,
                                ec.enserie
                from planning.entradas_completo ec
                where ec.emid = 52
                  and ec.ano = {0}
                  and ec.ntid like '3%'
                  and ec.ennf = {1}
                '''.format(
                    v_year,
                    v_row['nfe']
                )
            )

            if len(v_nfeTable.Rows) > 0:
                v_inputsTable.AddRow([
                    len(v_inputsTable.Rows) + 1,
                    v_nfeTable.Rows[0]['cfid'],
                    v_row['nfe'],
                    v_row['dt_desemb'],
                    v_nfeTable.Rows[0]['enserie'],
                    v_row['cfop_nf'],
                    v_row['codbr2'],
                    v_row['n_di'],
                    v_row['qtde_entrada'],
                    v_row['unidade_medida_entrada'],
                    v_row['fob_tt_rs'],
                    v_row['ii_rs'],
                    v_row['frete_rs'],
                    v_row['seguro_rs'],
                    v_row['aduaneiras'],
                    0,
                    v_row['ipi_rs'],
                    0,
                    0,
                    0,
                    v_row['dt_di'],
                    v_row['tx_us_di'],
                    '',
                    1,
                    0
                ])
            else:
                if not v_row['nfe'] in v_nfeOutDbInFile:
                    v_nfeOutDbInFile.append(v_row['nfe'])

    v_outputFile1 = Spartacus.Utils.DataFileWriter(
        v_outputFileName + ' - PRODUTOS.xlsx'
    )

    v_outputFile1.Open()

    v_outputFile1.Write(
        v_productsTable,
        'PRODUTOS'
    )

    v_outputFile1.Flush()

    v_outputFile2 = Spartacus.Utils.DataFileWriter(
        v_outputFileName + ' - ENTRADAS.xlsx'
    )

    v_outputFile2.Open()

    v_outputFile2.Write(
        v_inputsTable,
        'ENTRADAS'
    )

    v_outputFile2.Flush()

    print('\nAs NF-e abaixo constam no arquivo de entrada, porém não constam no banco de dados:')

    for v_nfe in v_nfeOutDbInFile:
        print(v_nfe)

    if v_inClause != '':
        v_inClause = v_inClause[:-2]

        v_table = v_database.Query('''
            select ec.ennf
            from planning.entradas_completo ec
            where ec.emid = 52
              and ec.ano = {0}
              and ec.ntid like '3%'
              and ec.ennf not in ({1})
            '''.format(
                v_year,
                v_inClause
            )
        )

        print('\n\nAs NF-e abaixo não constam no arquivo de entrada, porém constam no banco de dados:')

        for v_row in v_table.Rows:
            print(v_row['ennf'])

    v_database.Close()
except Spartacus.Database.Exception as exc:
    print(traceback.format_exc())
    print('Problema na linha {0} do arquivo de entrada'.format(i))
    sys.exit(0)
except Spartacus.Utils.Exception as exc:
    print(traceback.format_exc())
    print('Problema na linha {0} do arquivo de entrada'.format(i))
    sys.exit(0)
except CustomException as exc:
    print(traceback.format_exc())
    print('Problema na linha {0} do arquivo de entrada'.format(i))
    sys.exit(0)
except Exception as exc:
    print(traceback.format_exc())
    print('Problema na linha {0} do arquivo de entrada'.format(i))
    sys.exit(0)
